#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This file is part of osdoc.

osdoc is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

osdoc is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with osdoc.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import sys
import yaml
import re
import shutil
import subprocess
import csv
from md5 import md5
from optparse import OptionParser

def getInfo(path):

	"""
	Retrieves YAML info from a Markdown document.

	Arguments:
	path	--	The path to the document.

	Returns:
	A dictionary with YAML info.
	"""

	s = open(path).read().decode(u'utf-8')
	l = s.split(u'---')
	if len(l) < 3:
		print u'getInfo(): Failed to parse %s' % path
		return None
	y = yaml.load(l[1])
	return y

def setInfo(path, i):

	"""
	Modifies the YAML infor inside a Markdown document. The file is not modified
	directly, but returned as a string.

	Arguments:
	path	--	The patch to the document.
	i		--	A dictionary with the YAML info.

	Returns:
	A string with the modified document.
	"""

	# Sortkey has to be string, otherwise it will not be parsed correctly by
	# yaml
	s = open(path).read().decode(u'utf-8')
	l = s.split(u'---')
	if len(l) < 3:
		return None
	yml = u''
	for key, value in i.iteritems():
		yml += u'%s: %s\n' % (key, value)
	l[1] = yml
	s = u'---\n' + u'---'.join(l[1:])
	return s

def listContent(dirname=u'content', l=[]):

	"""
	Lists all content files in a given directory.

	Keyword arguments:
	dirname		--	The content directory or None to use the last command line
					parameter. (default=None)
	l			--	A list to append the files to (for recursion purposes).
					(default=[])

	Returns:
	A list of all content Markdown files.
	"""

	for basename in os.listdir(dirname):
		if basename.startswith(u'_'):
			continue
		path = os.path.join(dirname, basename)
		if os.path.isdir(path):
			l = listContent(dirname=path, l=l)
		elif basename.endswith(u'.md'):
			i = getInfo(path)
			if i != None:
				l.append((path, i))
				print path
	return l

def optimizeHTML(path):

	"""
	Recursively compress all HTML files in the path using htmlcompressor.jar

	Arguments:
	path		-- The folder path to optimize.
	"""

	for fname in os.listdir(path):
		fname = os.path.join(path, fname)
		if os.path.isdir(fname):
			optimizeHTML(fname)
		elif fname.lower().endswith(u'.html'):
			s1 = os.path.getsize(fname)
			cmd = [u'java', u'-jar', u'htmlcompressor.jar', u'--compress-js', \
				fname, u'-o', fname]
			subprocess.call(cmd)
			s2 = os.path.getsize(fname)
			print u'\t%s (%d kB -> %d kB, %d%%)' % (fname, s1, s2,
				(100.*s2/s1))

def copyFile(fromPath, toPath):

	"""
	Copies a file and creates the target folder structure if it doesn't exist.

	Arguments:
	fromPath	--	The source file.
	toPath		--	The target file.
	"""

	if not os.path.exists(os.path.dirname(toPath)):
		os.makedirs(os.path.dirname(toPath))
	shutil.copyfile(fromPath, toPath)

def parseOsdocYaml(path, info, s):

	"""
	Parses OSDOC-specific YAML sections to implement specific functionality.

	Arguments:
	path	--	The path to the page.
	info	--	A dictionaty with the page's front matter.
	s		--	A string with the page content.

	Returns:
	A string with the parsed page contents.
	"""

	import re

	# First check if the page is formatted for academicmarkdown
	if u'parser' in info and info[u'parser'] == u'academicmarkdown':
		from academicmarkdown import build, HTMLFilter
		print u'Parsing %s (%s) with academicmarkdown' % (info[u'title'], path)
		# We need to find all images, and copy these to the _content folder
		for r in re.finditer(u'%--(.*?)--%', s, re.M|re.S):
			try:
				d = yaml.load(r.groups()[0])
			except:
				print u'Invalid YAML block: %s' % r.groups()[0]
				continue
			if not u'figure' in d:
				continue
			src = os.path.join(path, u'img', info['permalink'][1:], \
				d[u'figure'][u'source'])
			print u'Copying %s' % src
			copyFile(src, u'_'+src)
		# Add all source paths to the build path, so that we can reference to
		# figures etc without considering paths
		build.path += [os.path.join(path, u'img', info['permalink'][1:]), \
			os.path.join(path, u'lst', info['permalink'][1:]), \
			os.path.join(path, u'tbl', info['permalink'][1:])]
		# Set the correct templates
		build.codeTemplate = u'jekyll'
		build.figureTemplate = u'jekyll'
		build.tableTemplate = u'kramdown'
		# Disable markdown filters
		build.preMarkdownFilters = []
		build.postMarkdownFilters = []
		# Enable clickable anchor headers
		build.TOCAnchorHeaders = True
		build.TOCAppendHeaderRefs = True
		s = build.MD(s)
		s = HTMLFilter.DOI(s)
		# Remove the content/ part of figure paths, because it does not apply to
		# the generated site.
		s = s.replace(u'![content/', u'![/')
		s = s.replace(u'(content/', u'(/')
		# Remove the three newly added entries from the build path.
		build.path = build.path[:-3]
		return s

	# If not, use the deprecated OSDOC-specific YAML parser
	replacements = []
	appends = []
	for r in re.finditer(':--(.*?)--:', s, re.M|re.S):
		d = yaml.load(r.groups()[0])
		if u'cmd' not in d:
			raise Exception(u'Expecting `cmd` field in OSDOC YAML block')
		if d[u'cmd'].lower() == u'figure':
			r, a = parseOsdocFigure(path, info, d, r.group(), s)
		elif d[u'cmd'].lower() == u'overview':
			r, a = parseOsdocOverview(path, info, d, r.group(), s)
		elif d[u'cmd'].lower() == u'video':
			r, a = parseOsdocVideo(path, info, d, r.group(), s)
		elif d[u'cmd'].lower() == u'listing':
			r, a = parseOsdocListing(path, info, d, r.group(), s)
		elif d[u'cmd'].lower() == u'table':
			r, a = parseOsdocTable(path, info, d, r.group(), s)
		else:
			print u'Unknown OSDOC YAML command: %s' % d[u'cmd']
			sys.exit(1)
		replacements += r
		appends += a
	for before, after in replacements:
		s = s.replace(before, after)
	for a in appends:
		s += '\n%s' % a
	try:
		from academicmarkdown import Filter
		s = Filter.DOI(s)
	except:
		print u'Failed to import academicmarkdown. Not parsing DOIs.'
	return s

def parseOsdocOverview(path, info, d, block, s):

	"""
	Parses an OSDOC YAML block to a MarkDown overview list.

	Arguments:
	path	--	The path to the page.
	info	--	A dictionary with the page's front matter.
	d		--	An OSDOC YAML dictionary.
	block 	--	The original YAML block.
	s		--	The page contents.

	Returns:
	A (replacements, appends) list, where replacements is a list of (old, new)
	tuples and appends is a list of lines that should be appended to the
	content.
	"""

	headers = []
	for i in re.finditer(r'^##(.*)', s, re.M):
		h = i.group()
		if h.startswith(u'####'):
			level = 4
		elif h.startswith(u'###'):
			level = 3
		elif h.startswith(u'##'):
			level = 2
		if u'depth' in d and level > d[u'depth']:
			continue
		label = h[level:].strip()
		# IDs should be lowercase alphanumeric strings with all spaces replaced
		# by dashes.
		_id = re.sub(ur'\W+', u'', label.replace(u' ', u'-')).lower()
		headers.append( (level, h, label, _id) )
	replacements = []
	appends = []
	md = u'## [Overview](#overview) {#overview}\n\n'
	for level, h, label, _id in headers:
		md += u'\t' * (level-2) # Indent
		md += u'- [%s](#%s)\n' % (label, _id)
		replacements.append( (h, u'%s [%s](#%s) {#%s}' % (u'#'*level, label, \
			_id, _id)) )
		appends.append(u'[%s]: #%s' % (label, _id))
	md += u'\n'
	replacements.append( (block, md) )
	return replacements, appends

def parseOsdocTable(path, info, d, block, s):

	"""
	Parses an OSDOC YAML block to a MarkDown table.

	Arguments:
	path	--	The path to the page.
	info	--	A dictionary with the page's front matter.
	d		--	An OSDOC YAML dictionary.
	block 	--	The original YAML block.
	s		--	The page contents.

	Returns:
	A (replacements, appends) list, where replacements is a list of (old, new)
	tuples and appends is a list of lines that should be appended to the
	content.
	"""

	info[u'tables'] += 1
	srcPath = os.path.join(path, u'tbl', info['permalink'][1:], d[u'src'])
	s = u''
	with open(srcPath, u'rb') as csvFile:
		csvReader = csv.reader(csvFile, delimiter=',', quotechar='"')
		for row in csvReader:
			s += ('|' + '|'.join(row) + '|\n').decode(u'utf-8')
	if u'caption' in d:
		s += u'\n__Table %d.__ %s\n{: .tbl-caption #table-%d}\n' \
			% (info[u'tables'], d[u'caption'], info[u'tables'])
	replacements = [ (block, s) ]
	appends = [ u'[Table %d]: #table-%d' % (info[u'tables'], \
		info[u'tables']) ]
	return replacements, appends

def parseOsdocListing(path, info, d, block, s):

	"""
	Parses an OSDOC YAML block to a MarkDown code block.

	Arguments:
	path	--	The path to the page.
	info	--	A dictionary with the page's front matter.
	d		--	An OSDOC YAML dictionary.
	block 	--	The original YAML block.
	s		--	The page contents.

	Returns:
	A (replacements, appends) list, where replacements is a list of (old, new)
	tuples and appends is a list of lines that should be appended to the
	content.
	"""

	info[u'listings'] += 1
	srcPath = os.path.join(path, u'lst', info['permalink'][1:], d[u'src'])
	if os.path.splitext(srcPath)[1] == u'.py':
		s = u'{%% highlight python %%}\n%s\n{%% endhighlight %%}\n'
	else:
		s = u'~~~\n%s~~~\n'
	s = s % open(srcPath).read()
	if u'caption' in d:
		s += u'\n\n__Listing %d.__ %s\n{: .lst-caption #listing-%d}\n' \
			% (info[u'listings'], d[u'caption'], info[u'listings'])
	replacements = [ (block, s) ]
	appends = [ u'[Listing %d]: #listing-%d' % (info[u'listings'], \
		info[u'listings']) ]
	return replacements, appends

def parseOsdocFigure(path, info, d, block, s):

	"""
	Parses an OSDOC YAML block to a MarkDown figure.

	Arguments:
	path	--	The path to the page.
	info	--	A dictionary with the page's front matter.
	d		--	An OSDOC YAML dictionary.
	block 	--	The original YAML block.
	s		--	The page contents.

	Returns:
	A (replacements, appends) list, where replacements is a list of (old, new)
	tuples and appends is a list of lines that should be appended to the
	content.
	"""

	info[u'figures'] += 1
	if u'alt' not in d:
		d[u'alt'] = u'No alt text specified'
	# Full path to the source image
	srcPath = os.path.join(path, u'img', info['permalink'][1:], d[u'src'])
	# The path as it should be linked
	linkPath = srcPath[8:]
	# Full path to the target image
	targetPath = u'_' + srcPath
	copyFile(srcPath, targetPath)
	print srcPath
	s = u'![%s](/%s)' % (d[u'alt'], linkPath)
	if u'caption' in d:
		s += u'\n\n__Figure %d.__ %s\n{: .fig-caption #figure-%d}\n' \
			% (info[u'figures'], d[u'caption'], info[u'figures'])
	replacements = [ (block, s) ]
	appends = [ u'[Figure %d]: #figure-%d' % (info[u'figures'], \
		info[u'figures']) ]
	return replacements, appends

def parseOsdocVideo(path, info, d, block, s):

	"""
	Parses an OSDOC YAML block to a MarkDown video.

	Arguments:
	path	--	The path to the page.
	info	--	A dictionary with the page's front matter.
	d		--	An OSDOC YAML dictionary.
	block 	--	The original YAML block.
	s		--	The page contents.

	Returns:
	A (replacements, appends) list, where replacements is a list of (old, new)
	tuples and appends is a list of lines that should be appended to the
	content.
	"""

	info[u'videos'] += 1
	if u'width' not in d:
		d[u'width'] = 640
	if u'height' not in d:
		d[u'height'] = 480
	if d[u'src'] == u'vimeo':
		s = u"""<iframe src="//player.vimeo.com/video/%s?color=8ae234" width="%d" height="%d" class="video vimeo" allowfullscreen></iframe>""" \
			% (d[u'id'], d[u'width'], d[u'height'])
	elif d[u'src'] == u'youtube':
		s = u"""<iframe width="%d" height="%d" src="//www.youtube.com/embed/%s" class="video youtube" allowfullscreen></iframe>""" \
			% (d[u'width'], d[u'height'], d[u'id'])
	else:
		print u'Unknown video source: %s' % d[u'src']
		sys.exit(1)
	if u'caption' in d:
		s += u'\n\n__Video %d.__ %s\n{: .vid-caption #video-%d}\n' \
			% (info[u'videos'], d[u'caption'], info[u'videos'])
	replacements = [ (block, s) ]
	appends = [u'[Video %d]: #video-%d' % (info[u'videos'], \
		info[u'videos']) ]
	return replacements, appends

def gitInfo(path):

	"""
	Generates a string with git information for a given page.

	Arguments:
	path		--	The path to the page.

	Returns:
	A string with git info.
	"""

	cmd = [u'git', u'log', u'--format="Revision <a href=\'https://github.com/smathot/osdoc/commit/%H\'>#%h</a> on %cd"', u'-n', u'1', path]
	out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()
	return out

if __name__ == u'__main__':

	# Parse command line options
	parser = OptionParser()
	parser.add_option(u'-n', u'--nojekyll', dest=u'jekyll', help= \
		u'Do not generate site with Jekyll', action=u'store_false', \
		default=True)
	parser.add_option(u'-c', u'--check-links', dest=u'checkLinks', help= \
		u'Check for dead links (requires linkchecker)', action=u'store_true', \
		default=False)
	parser.add_option(u'-o', u'--optimize-html', dest=u'optimizeHTML', help= \
		u'Optimize HTML (requires htmlcompressor.jar)', action=u'store_true', \
		default=False)
	parser.add_option(u'-t', u'--tarball', dest=u'tarball', help= \
		u'Generate site tarball', action=u'store_true', \
		default=False)
	parser.add_option(u'-g', u'--group', dest=u'group', help= \
		u'Only parse a specific group', default=None)
	parser.add_option(u'-s', u'--sitemap', dest=u'sitemap', help= \
		u'Indicate sitemap file', default=u'sitemap.txt')
	parser.add_option(u'--src', dest=u'src', help= \
		u'Source folder', default=u'content')
	parser.add_option(u'--target', dest=u'target', help= \
		u'Target folder', default=u'_content')
	parser.add_option(u'--layout', dest=u'layout', help= \
		u'Layout file', default=u'inpage')
	options, args = parser.parse_args()

	src = options.src
	target = options.target

	# Recreate the target folder
	print u'\nRecreating target folder (%s)...' % target
	if os.path.exists(target):
		shutil.rmtree(target)
	os.mkdir(target)

	# Copy all non-page resources
	print u'\nCopying non-page resources ...'
	shutil.copytree(u'%s/_includes' % src, u'%s/_includes' % target)
	shutil.copytree(u'%s/_layouts' % src, u'%s/_layouts' % target)
	shutil.copytree(u'%s/attachments' % src, u'%s/attachments' % target)
	shutil.copytree(u'%s/img' % src, u'%s/img' % target)
	shutil.copy(u'%s/favicon.ico' % src, u'%s/favicon.ico' % target)
	shutil.copy(u'%s/_layouts/osdoc-%s.html' % (src, options.layout), \
		u'%s/_layouts/osdoc.html' % target)

	print u'\nCompiling .less to .css ...'
	cmd = ['lesscpy', '-X', '%s/stylesheets/main.less' % src]
	subprocess.call(cmd, stdout=open(u'%s/stylesheet.css' % target, u'w'))

	print u'\nListing content ...'
	content = listContent()

	print u'\nCompiling pages ...'
	sortkey = [0,0]
	group = 'General'
	sitemap = open(options.sitemap.encode(sys.getfilesystemencoding())).read() \
		.decode(u'utf-8')
	for title in sitemap.split(u'\n'):
		if title.startswith(u'#') or title.strip() == u'':
			continue
		if title.startswith(u'\t'):
			sortkey[1] += 1
			level = 1
		else:
			sortkey[0] += 1
			level = 0
		title = title.strip()
		if title.startswith(u':'):
			show = False
			title = title[1:]
		else:
			show = True
		i = 0
		for path, info in content:
			if info[u'title'].lower() == title.lower():
				targetPath = u'_' + path
				if level > 0:
					print u'\t',
				else:
					group = info[u'group']
				print '-> %s' % title
				info[u'show'] = show
				info[u'sortkey'] = u'%.3d.%.3d' % (sortkey[0], sortkey[1])
				info[u'level'] = level
				info[u'group'] = group
				info[u'figures'] = 0
				info[u'videos'] = 0
				info[u'listings'] = 0
				info[u'tables'] = 0
				info[u'gitinfo'] = gitInfo(path)
				info[u'gitlink'] = \
					u'https://github.com/smathot/osdoc/blob/master/%s' \
					% path
				if options.group == None or group.lower() == \
					options.group.lower() or title.lower() == u'home':
					s = setInfo(path, info)
					# Fix missing alt tags
					s = s.replace(u'![](', u'![No alt text specified](')
					#s = parseImages(os.path.dirname(path), yaml, s)
					s = parseOsdocYaml(os.path.dirname(path), info, s)
					if not os.path.exists(os.path.dirname(targetPath)):
						os.mkdir(os.path.dirname(targetPath))
					open(targetPath.encode(sys.getfilesystemencoding()), \
						u'w').write(s.encode(u'utf-8'))
				i += 1
		if i > 1:
			raise Exception(u'Multiple matches for "%s"' % title)
		if i == 0:
			raise Exception(u'Failed to find "%s"' % title)

	# Optionally generate the site with jekyll
	if options.jekyll:
		print u'\nLaunching jekyll'
		subprocess.call([u'jekyll'])

	# Optionally optimze the HTML using htmlcompress
	if options.optimizeHTML:
		print u'\nOptimizing HTML'
		optimizeHTML(u'_site')

	# Optionally create a tarball of the site
	if options.tarball:
		print u'\nCreating tarball (osdoc.tar.gz)'
		cmd = [u'tar', u'-zcvf', u'osdoc.tar.gz', u'-C', u'_site', u'.', \
			u'--exclude-from=dev-scripts/excludefromgz.txt']
		subprocess.call(cmd)
		shutil.move(u'osdoc.tar.gz', u'_site')

	# Optionally check for dead links
	if options.checkLinks:
		print u'\nChecking for dead links'
		cmd = [u'linkchecker', u'--no-warnings', u'-o', u'csv', \
			u'http://localhost:8000']
		subprocess.call(cmd, stdout=open(u'deadlinks.log', u'w'))
		nErr = 0
		for l in open(u'deadlinks.log').read().decode(u'utf-8').split(
			u'\n')[4:]:
			r = l.split(u';')
			if len(r) < 6 or r[0] == u'urlname':
				continue
			url = r[0]
			# Don't check index.pdf pages, as they are generated later on, and
			# don't check e-mail addresses.
			if url.endswith(u'index.pdf') or url.startswith(u'mailto:'):
				continue
			parent = r[1]
			warning = r[3]
			valid = r[5] == u'False'
			nErr += 1
			print '%s\n\tin %s' % (url, parent)
		print u'%d dead link(s) found' % nErr
