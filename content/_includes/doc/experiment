<div class='pydoc'>
<p><small>For OpenSesame 2.8.2</small></p>
<span class='class_name'>class <b>experiment</b></span><br />
<p class='details'><b>Function overview:</b><br />
<a href='#experiment.__init__'>__init__</a><br />
<a href='#experiment.auto_type'>auto_type</a><br />
<a href='#experiment.color_check'>color_check</a><br />
<a href='#experiment.eval_text'>eval_text</a><br />
<a href='#experiment.file_in_pool'>file_in_pool</a><br />
<a href='#experiment.flush_log'>flush_log</a><br />
<a href='#experiment.get'>get</a><br />
<a href='#experiment.get_check'>get_check</a><br />
<a href='#experiment.get_file'>get_file</a><br />
<a href='#experiment.get_refs'>get_refs</a><br />
<a href='#experiment.has'>has</a><br />
<a href='#experiment.log'>log</a><br />
<a href='#experiment.resolution'>resolution</a><br />
<a href='#experiment.sanitize'>sanitize</a><br />
<a href='#experiment.set'>set</a><br />
<a href='#experiment.set_response'>set_response</a><br />
<a href='#experiment.set_subject'>set_subject</a><br />
<a href='#experiment.sleep'>sleep</a><br />
<a href='#experiment.time'>time</a><br />
<a href='#experiment.unistr'>unistr</a><br />
<a href='#experiment.unset'>unset</a><br />
</p>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.__init__'>experiment</a>.<b>__init__(name=u'experiment', string=None, pool_folder=None, experiment_path=None, fullscreen=False, auto_response=False, logfile=u'defaultlog.csv', subject_nr=0)</b></span><div class='details'>
Constructor. The experiment is created automatically be OpenSesame and you will generally not need to create it yourself.<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>name 			</span> &rarr; 	The name of the experiment. (default=u'experiment')
<br />
<span class='variable'>string 			</span> &rarr; 	A string containing the experiment definition. 
(default=None)<br />
<span class='variable'>pool_folder		</span> &rarr; 	A specific folder to be used for the file pool. 
(default=None)<br />
<span class='variable'>experiment_path	</span> &rarr; 	The path of the experiment file. (default=None)
<br />
<span class='variable'>fullscreen		</span> &rarr; 	Indicates whether the experiment should be 
executed in fullscreen. (default=False)<br />
<span class='variable'>auto_response	</span> &rarr; 	Indicates whether auto-response mode should be 
enabled. (default=False)<br />
<span class='variable'>logfile			</span> &rarr; 	The logfile path. (default=u'defaultlog.csv')
<br />
<span class='variable'>subject_nr		</span> &rarr; 	The subject number. (default=0)
<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.auto_type'>experiment</a>.<b>auto_type(val)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Converts a value into the 'best fitting' or 'simplest' type that is compatible with the value.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>val </span> &rarr;  A value.
<br />
<br />
<span class='keyword'>Returns:</span>
<br />
The same value converted to the 'best fitting' type.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}print(type(self.auto_type('1'))) # Prints 'int'
print(type(self.auto_type('1.1'))) # Prints 'float'
print(type(self.auto_type('some text'))) # Prints 'unicode'
# Note: Boolean values are converted to 'yes' / 'no' and are
# therefore also returned as unicode objects.
print(type(self.auto_type(True))) # Prints 'unicode'
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.color_check'>experiment</a>.<b>color_check(col)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Checks whether a string is a valid color name.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>col </span> &rarr;  The color to check.
<br />
<br />
<span class='keyword'>Exceptions:</span>
<br />
Raises a osexception if col is not a valid color.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}# Ok
print(self.color_check('red'))
# Ok
print(self.color_check('#FFFFFF'))
# Raises osexception
print(self.color_check('this is not a color'))
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.eval_text'>experiment</a>.<b>eval_text(text, round_float=False, soft_ignore=False, quote_str=False)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Evaluates a string of text, so that all variable references (e.g., '[var]') are replaced by values.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>text </span> &rarr;  The text to be evaluated.
<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>round_float </span> &rarr;  A Boolean indicating whether float values should be 
rounded to a precision of [round_decimals]. round_decimals is an OpenSesame variable that has a default value of 2. (Default=False)<br />
<span class='variable'>soft_ignore </span> &rarr;  A Boolean indicating whether missing variables should be 
ignored, rather than cause an exception (default=False).<br />
<span class='variable'>quote_str </span> &rarr;  A Boolean indicating whether string variables should be 
surrounded by single quotes (default=False).<br />
<br />
<span class='keyword'>Returns:</span>
<br />
The evaluated text.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}exp.set('var', 'evaluated')
# Prints 'This string has been evaluated
print(self.eval_text('This string has been [var]'))
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.file_in_pool'>experiment</a>.<b>file_in_pool(path)</b></span><div class='details'>
Checks if a file is in the file pool.<br />
<br />
<span class='keyword'>Returns:</span>
<br />
A Boolean indicating if the file is in the pool.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}if not exp.file_in_pool('my_image.png'):
	print('my_image.png could not be found!')
else:
	image_path = exp.get_file('my_image.png')
	my_canvas = exp.offline_canvas()
	my_canvas.image(image_path)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.flush_log'>experiment</a>.<b>flush_log()</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Forces any pending write operations to the log file to be written to disk.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}self.log('TRIAL FINISHED')
self.flush_log()
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.get'>experiment</a>.<b>get(var, _eval=True)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Returns the value of an OpenSesame variable. Checks first if the variable exists 'locally' in the item and, if not, checks if the variable exists 'globally' in the experiment.<br />
<br />
The type of the returned value can be int, float, or unicode (string). The appropriate type is automatically selected, e.g. '10' is returned as int, '10.1' as float, and 'some text' as unicode.<br />
<br />
The _eval parameter is used to specify whether the value of the variable should be evaluated, in case it contains references to other variables. This is best illustrated by example 2 below.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>var </span> &rarr;  The name of an OpenSesame variable.
<br />
<span class='variable'>_eval </span> &rarr;  Indicates whether the variable should be evaluated, i.e. 
whether containing variables should be processed (default=True).<br />
<br />
<span class='keyword'>Exceptions:</span>
<br />
A osexception is raised if the variable is not found.<br />
<br />
<span class='keyword'>Returns:</span>
<br />
The value.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}if self.get('cue') == 'valid':
	print('This is a validly cued trial')
{% endhighlight %}
<br />
Example 2:<br />
{% highlight python %}exp.set('var1', 'I like [var2]')
exp.set('var2', 'OpenSesame')
print(self.get('var1')) # prints 'I like OpenSesame'
print(self.get('var1', _eval=False)) # prints 'I like [var2]'
{% endhighlight %}
<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.get_check'>experiment</a>.<b>get_check(var, default=None, valid=None, _eval=True)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Similar to get(), but falls back to a default if the variable has not been set. It also raises an error if the value is not part of the valid list.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>var </span> &rarr;  The name of an OpenSesame variable
<br />
<span class='variable'>default </span> &rarr;  A default 'fallback' value or None for no fallback, in which 
case an exception is rased if the value does not exist.<br />
<span class='variable'>valid </span> &rarr;  A list of allowed values (or None for no restrictions). An 
exception is raised if the value is not an allowed value.<br />
<span class='variable'>_eval </span> &rarr;  Indicates whether the variable should be evaluated, i.e. 
whether containing variables should be processed (default=True).<br />
<br />
<span class='keyword'>Exceptions:</span>
<br />
Raises a osexception if the variable is not defined and there is no default value, or if the variable value is not part of the 'valid' list.<br />
<br />
<span class='keyword'>Returns:</span>
<br />
The value<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}if self.get_check('cue', default='invalid') == 'valid':
	print('This is a validly-cued trial')
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.get_file'>experiment</a>.<b>get_file(path)</b></span><div class='details'>
Returns the path to a file. First checks if the file is in the file pool and then the folder of the current experiment (if any), or in the `__pool__` subfolder of the current experiment. Otherwise, simply returns the path.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>path	</span> &rarr; 	The filename.
<br />
<br />
<span class='keyword'>Returns:</span>
<br />
The full path to the file.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}image_path = exp.get_file('my_image.png')
my_canvas = exp.offline_canvas()
my_canvas.image(image_path)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.get_refs'>experiment</a>.<b>get_refs(text)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Returns a list of variables that are referred to by a string of text.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>text </span> &rarr;  A string of text.
<br />
<br />
<span class='keyword'>Returns:</span>
<br />
A list of variable names or an empty list if the string contains no references.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}print(self.get_refs('There are [two] [references] here'))
# Prints ['two', 'references']
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.has'>experiment</a>.<b>has(var)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Checks if an OpenSesame variable exists, either in the item or in the experiment.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>var </span> &rarr;  The name of an OpenSesame variable.
<br />
<br />
<span class='keyword'>Returns:</span>
<br />
True if the variable exists, False if not.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}if not self.has('response'):
	print('No response has been collected yet')
{% endhighlight %}
<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.log'>experiment</a>.<b>log(msg)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Writes a message to the log file. Note that using the log() function in combination with a logger item may result in messy log files.<br />
<br />
<span class='variable'>msg	</span> &rarr; 	A message. This can be any type and will we be converted to a 
unicode string using the logic described in `unistr()`.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}self.log('TIMESTAMP = %s' % self.time())
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.resolution'>experiment</a>.<b>resolution()</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Returns the display resolution and check whether the resolution is valid.<br />
<br />
Note: The meaning of 'resolution' depends on the back-end. For example, the legacy and OpenGL back-ends change the actual resolution of the display, whereas the other back-ends do not alter the actual display resolution, 	but create a 'virtual display' with the requested resolution that is presented in the center of the display.<br />
<br />
<span class='keyword'>Returns:</span>
<br />
A (width, height) tuple<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.sanitize'>experiment</a>.<b>sanitize(s, strict=False, allow_vars=True)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Removes invalid characters (notably quotes) from the string.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>s </span> &rarr;  The string (unicode or str) to be sanitized.
<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>strict </span> &rarr;  If True, all except underscores and alphanumeric characters are
<br />
stripped (default=False).<br />
<span class='variable'>allow_vars </span> &rarr;  If True, square brackets are not sanitized, so you can use
<br />
variables (default=True).<br />
<br />
<span class='keyword'>Returns:</span>
<br />
A sanitized unicode string<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}# Prints 'Universit Aix-Marseille'
print(self.sanitize('\"Université Aix-Marseille\"'))
# Prints 'UniversitAixMarseille'
print(self.sanitize('\"Université Aix-Marseille\""', strict=True))
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.set'>experiment</a>.<b>set(var, val)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Sets an OpenSesame variable.<br />
<br />
If you want to set a variable so that it is available in other items as well (such as the logger item, so you can log the variable), you need to use the set() function from the experiment. So, in an inline_script item you would generally set a variable with exp.set(), rather than self.set().<br />
<br />
Please note that you can only set simple variable types (str, unicode, float, and int). If you use the set function to save an object, it will be converted to a string representation. To make complex variables globally accessible in your experiment, please use the global keyword.<br />
<br />
The type of the value can be anything. However, see get() for an explanation of how data-types are handled.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>var </span> &rarr;  The name of an OpenSesame variable.
<br />
<span class='variable'>val </span> &rarr;  The value.
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}exp.set('my_timestamp', self.time())
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.set_response'>experiment</a>.<b>set_response(response=None, response_time=None, correct=None)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Processes a response in such a way that feedback variables are updated as well.<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>response		</span> &rarr; 	The response value. (default=None)
<br />
<span class='variable'>response_time	</span> &rarr; 	The response time. (default=None)
<br />
<span class='variable'>correct			</span> &rarr; 	The correctness value. (default=None)
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.keyboard import keyboard
my_keyboard = keyboard(exp)
t1 = self.time()
button, timestamp = my_keyboard.get_key()
if button == 'left':
	correct = 1
else:
	correct = 0
rt = timestamp - t1
self.set_response(response=button, response_time=rt, \
	correct=correct)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.set_subject'>experiment</a>.<b>set_subject(nr)</b></span><div class='details'>
Sets the subject number and parity (even/ odd). This function is called automatically when an experiment is started, so you do not generally need to call it yourself.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>nr	</span> &rarr; 	The subject nr.
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}exp.set_subject(1)
print('Subject nr = %d' % exp.get('subject_nr'))
print('Subject parity = %s' % exp.get('subject_parity'))
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.sleep'>experiment</a>.<b>sleep(ms)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Sleeps for a specified duration.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>ms </span> &rarr;  An integer value specifying the duration in milliseconds.
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}self.sleep(1000) # Sleeps one second
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.time'>experiment</a>.<b>time()</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Returns the current time.<br />
<br />
<span class='keyword'>Returns:</span>
<br />
A timestamp of the current time.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}print('The time is %s' % self.time())
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.unistr'>experiment</a>.<b>unistr(val)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Converts a value to a unicode string. This function is mostly necessary to make sure that normal strings with special characters are correctly encoded into unicode, and don't result in TypeErrors.<br />
<br />
The conversion logic is as follows:<br />
<br />
- unicode values are returned unchanged.<br />
- str values are decoded using utf-8.<br />
- all other types are typecast to unicode, assuming utf-8 encoding where applicable.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>val </span> &rarr;  A value of any type.
<br />
<br />
<span class='keyword'>Returns:</span>
<br />
A unicode string.<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='experiment.unset'>experiment</a>.<b>unset(var)</b></span><div class='details'>
<i>Inherited from <b>item</b></i><br /><br />Unsets (forgets) an OpenSesame variable.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>var </span> &rarr;  The name of an OpenSesame variable.
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}self.set('var', 'Hello world!')
print(self.get('var')) # Prints 'Hello world!'
self.unset('variable_to_forget')
print(self.get('var')) # Gives error!
{% endhighlight %}<br />
</div></div>
</div>