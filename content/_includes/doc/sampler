<div class='pydoc'>
<p><small>For OpenSesame 2.8.2</small></p>
<span class='class_name'>class <b>sampler</b></span><br />
<p class='details'><b>Function overview:</b><br />
<a href='#sampler.__init__'>__init__</a><br />
<a href='#sampler.fade_in'>fade_in</a><br />
<a href='#sampler.is_playing'>is_playing</a><br />
<a href='#sampler.pan'>pan</a><br />
<a href='#sampler.pause'>pause</a><br />
<a href='#sampler.pitch'>pitch</a><br />
<a href='#sampler.play'>play</a><br />
<a href='#sampler.resume'>resume</a><br />
<a href='#sampler.stop'>stop</a><br />
<a href='#sampler.stop_after'>stop_after</a><br />
<a href='#sampler.volume'>volume</a><br />
<a href='#sampler.wait'>wait</a><br />
</p>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.__init__'>sampler</a>.<b>__init__(experiment, src)</b></span><div class='details'>
Initializes the sampler with a specified file.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>experiment </span> &rarr;  An instance of libopensesame.experiment.experiment.
<br />
<span class='variable'>src </span> &rarr;  A path to a .wav or .ogg file.
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.fade_in'>sampler</a>.<b>fade_in(ms)</b></span><div class='details'>
Sets the fade-in time in milliseconds.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>ms </span> &rarr;  An integer value specifying the duration in milliseconds.
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.fade_in(100)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.is_playing'>sampler</a>.<b>is_playing()</b></span><div class='details'>
Checks if a sound is currently playing.<br />
<br />
<span class='keyword'>Returns:</span>
<br />
True if a sound is playing, False if not.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
self.sleep(100)
if my_sampler.is_playing():
	print('The sampler is still playing!')
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.pan'>sampler</a>.<b>pan(p)</b></span><div class='details'>
Sets the panning of the sample. The volume of the "unpanned" channel decreases, the volume of the other channel remains the same. To fully mute one channel specify "left" (mutes right, pans to left) or "right" (mutes left, pans to right").<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>p </span> &rarr;  Panning. A float (p < 0 = to left, p > 0 = to right) or string 
("left" or "right").<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.pan('left')
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.pause'>sampler</a>.<b>pause()</b></span><div class='details'>
Pauses playback (if any).<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
self.sleep(100)
my_sampler.pause()
self.sleep(100)
my_sampler.resume()
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.pitch'>sampler</a>.<b>pitch(p)</b></span><div class='details'>
Sets the relative pitch of the sample.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>p </span> &rarr;  The pitch. p > 1.0 slows the sample down, p < 1.0 speeds 
the sample up.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.pitch(2.0)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.play'>sampler</a>.<b>play(block=False)</b></span><div class='details'>
Plays the sound.<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>block </span> &rarr;  If True, block until the sound is finished (default = False).
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.resume'>sampler</a>.<b>resume()</b></span><div class='details'>
Resumes playback (if any).<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
self.sleep(100)
my_sampler.pause()
self.sleep(100)
my_sampler.resume()
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.stop'>sampler</a>.<b>stop()</b></span><div class='details'>
Stops the currently playing sound (if any).<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
self.sleep(100)
my_sampler.stop()
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.stop_after'>sampler</a>.<b>stop_after(ms)</b></span><div class='details'>
Specifies a duration after which the sampler stops playing.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>ms </span> &rarr;  An integer value specifying the duration in milliseconds.
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.stop_after(100)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.volume'>sampler</a>.<b>volume(vol)</b></span><div class='details'>
Sets the volume.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>vol </span> &rarr;  A volume between 0.0 and 1.0
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.volume(0.5)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='sampler.wait'>sampler</a>.<b>wait()</b></span><div class='details'>
Blocks until the sound has finished playing or returns right away if no sound is playing.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
my_sampler.wait()
print('The sampler is finished!')
{% endhighlight %}<br />
</div></div>
</div>