<div class='pydoc'>
<p><small>For OpenSesame 2.8.2</small></p>
<span class='class_name'>class <b>synth</b></span><br />
<p class='details'><b>Function overview:</b><br />
<a href='#synth.__init__'>__init__</a><br />
<a href='#synth.fade_in'>fade_in</a><br />
<a href='#synth.is_playing'>is_playing</a><br />
<a href='#synth.key_to_freq'>key_to_freq</a><br />
<a href='#synth.pan'>pan</a><br />
<a href='#synth.pause'>pause</a><br />
<a href='#synth.pitch'>pitch</a><br />
<a href='#synth.play'>play</a><br />
<a href='#synth.resume'>resume</a><br />
<a href='#synth.stop'>stop</a><br />
<a href='#synth.stop_after'>stop_after</a><br />
<a href='#synth.volume'>volume</a><br />
<a href='#synth.wait'>wait</a><br />
</p>
<div class='function'><span class='function_name'><a class='anchor' id='synth.__init__'>synth</a>.<b>__init__(experiment, osc="sine", freq=440, length=100, attack=0, decay=5)</b></span><div class='details'>
Initializes the synthesizer.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>experiment </span> &rarr;  An instance of libopensesame.experiment.experiment.
<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>osc </span> &rarr;  Oscillator, can be "sine", "saw", "square" or "white_noise" 
(default = "sine").<br />
<span class='variable'>freq </span> &rarr;  Frequency, either an integer value (value in hertz) or a string 
("A1", "eb2", etc.). (Default = 440)<br />
<span class='variable'>length </span> &rarr;  The length of the sound in milliseconds (default = 100).
<br />
<span class='variable'>attack </span> &rarr;  The attack (fade-in) time in milliseconds (default = 0).
<br />
<span class='variable'>decay </span> &rarr;  The decay (fade-out) time in milliseconds (default = 5).
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.synth import synth
my_synth = synth(exp, freq='b2', length=500)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.fade_in'>synth</a>.<b>fade_in(ms)</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Sets the fade-in time in milliseconds.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>ms </span> &rarr;  An integer value specifying the duration in milliseconds.
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.fade_in(100)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.is_playing'>synth</a>.<b>is_playing()</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Checks if a sound is currently playing.<br />
<br />
<span class='keyword'>Returns:</span>
<br />
True if a sound is playing, False if not.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
self.sleep(100)
if my_sampler.is_playing():
	print('The sampler is still playing!')
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.key_to_freq'>synth</a>.<b>key_to_freq(key)</b></span><div class='details'>
Converts a key (e.g., A1) to a frequency.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>key </span> &rarr;  A string like "A1", "eb2", etc.
<br />
<br />
<span class='keyword'>Returns:</span>
<br />
An integer value containing the frequency in hertz.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.synth import synth
my_synth = synth(exp)
print('An a2 is %d Hz' % my_synth.key_to_freq('a2'))
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.pan'>synth</a>.<b>pan(p)</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Sets the panning of the sample. The volume of the "unpanned" channel decreases, the volume of the other channel remains the same. To fully mute one channel specify "left" (mutes right, pans to left) or "right" (mutes left, pans to right").<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>p </span> &rarr;  Panning. A float (p < 0 = to left, p > 0 = to right) or string 
("left" or "right").<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.pan('left')
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.pause'>synth</a>.<b>pause()</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Pauses playback (if any).<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
self.sleep(100)
my_sampler.pause()
self.sleep(100)
my_sampler.resume()
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.pitch'>synth</a>.<b>pitch(p)</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Sets the relative pitch of the sample.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>p </span> &rarr;  The pitch. p > 1.0 slows the sample down, p < 1.0 speeds 
the sample up.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.pitch(2.0)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.play'>synth</a>.<b>play(block=False)</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Plays the sound.<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>block </span> &rarr;  If True, block until the sound is finished (default = False).
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.resume'>synth</a>.<b>resume()</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Resumes playback (if any).<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
self.sleep(100)
my_sampler.pause()
self.sleep(100)
my_sampler.resume()
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.stop'>synth</a>.<b>stop()</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Stops the currently playing sound (if any).<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
self.sleep(100)
my_sampler.stop()
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.stop_after'>synth</a>.<b>stop_after(ms)</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Specifies a duration after which the sampler stops playing.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>ms </span> &rarr;  An integer value specifying the duration in milliseconds.
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.stop_after(100)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.volume'>synth</a>.<b>volume(vol)</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Sets the volume.<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>vol </span> &rarr;  A volume between 0.0 and 1.0
<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.volume(0.5)
{% endhighlight %}<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='synth.wait'>synth</a>.<b>wait()</b></span><div class='details'>
<i>Inherited from <b>legacy</b></i><br /><br />Blocks until the sound has finished playing or returns right away if no sound is playing.<br />
<br />
<span class='keyword'>Example:</span>
<br />
{% highlight python %}from openexp.sampler import sampler
src = exp.get_file('my_sound.ogg')
my_sampler = sampler(exp, src)
my_sampler.play()
my_sampler.wait()
print('The sampler is finished!')
{% endhighlight %}<br />
</div></div>
</div>